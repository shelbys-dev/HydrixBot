const { SlashCommandBuilder, PermissionsBitField } = require('discord.js');
const { serverConfigs, saveConfigs, updateServerConfig } = require('../data/serverconfigs.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('config')
        .setDescription("Configurer diff√©rentes fonctionnalit√©s pour ce serveur.")
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('Configurer un salon "logs" pour enregistrer les actions de mod√©ration üö®')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('liens')
                .setDescription('Configurer ou mettre √† jour les liens pour le serveur.')
                .addStringOption(option =>
                    option.setName('nom')
                        .setDescription('Le nom du lien (exemple : "Site Web").')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('url')
                        .setDescription('L‚ÄôURL du lien (exemple : https://example.com).')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('automessage')
                .setDescription('Configurer les messages automatiques pour ce serveur.')
                .addChannelOption(option =>
                    option
                        .setName('channel')
                        .setDescription('Le canal o√π envoyer des messages automatiques.')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option
                        .setName('message')
                        .setDescription('Le contenu du message automatique.')
                        .setRequired(true)
                )
                .addIntegerOption(option =>
                    option
                        .setName('interval')
                        .setDescription('Intervalle entre les messages (en secondes).')
                        .setRequired(true)
                )
        )
        .addSubcommand((subcommand) =>
            subcommand
                .setName("roles")
                .setDescription("Configurer les noms des r√¥les Admin et Mute")
                .addStringOption((option) =>
                    option
                        .setName("admin_role")
                        .setDescription("Nom du r√¥le d'admin du serveur")
                        .setRequired(false)
                )
                .addStringOption((option) =>
                    option
                        .setName("mute_role")
                        .setDescription("Nom du r√¥le mute du serveur")
                        .setRequired(false)
                )
        ),
    async execute(interaction) {
        const guild = interaction.guild;
        const subcommand = interaction.options.getSubcommand(); // Sous-commande ex√©cut√©e

        try {
            if (subcommand === 'setup') {
                // ------------------- SETUP (Salon Logs) ------------------- //
                if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    return interaction.reply({
                        content: "‚ùå Vous n'avez pas les permissions n√©cessaires pour ex√©cuter cette commande.",
                        ephemeral: true,
                    });
                }

                // V√©rifie si un salon "logs" existe
                const existingChannel = guild.channels.cache.find(ch => ch.name.toLowerCase() === 'logs');
                if (existingChannel) {
                    return interaction.reply({
                        content: 'üõ†Ô∏è Un canal "logs" existe d√©j√† dans ce serveur.',
                        ephemeral: true,
                    });
                }

                // Cr√©e un salon "logs"
                const logChannel = await guild.channels.create({
                    name: 'logs',
                    type: 0, // Salon texte
                    permissionOverwrites: [
                        {
                            id: guild.id, // Tout le monde
                            deny: ['ViewChannel'], // Cache le canal
                        },
                        {
                            id: interaction.member.id, // L'utilisateur
                            allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory'],
                        },
                        {
                            id: guild.members.me.id, // Bot
                            allow: ['ViewChannel', 'SendMessages', 'EmbedLinks', 'ManageMessages'],
                        },
                    ],
                });

                await interaction.reply({
                    content: `‚úÖ Le salon priv√© **#logs** a √©t√© cr√©√© avec succ√®s.`,
                    ephemeral: true,
                });

                await logChannel.send("üîí Ce salon est configur√© pour enregistrer les actions de mod√©ration.");
            }

            if (subcommand === 'liens') {
                // ------------------- LIENS ------------------- //
                const guildId = interaction.guild.id;
                const name = interaction.options.getString('nom');
                const url = interaction.options.getString('url');

                if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    return interaction.reply({
                        content: "‚ùå Vous n'avez pas les permissions n√©cessaires pour ex√©cuter cette commande.",
                        ephemeral: true,
                    });
                }

                // Valide l'URL
                if (!/^https?:\/\/.+\..+/i.test(url)) {
                    return interaction.reply({
                        content: '‚ùå URL invalide. Assurez-vous qu‚Äôelle commence par "http://" ou "https://".',
                        ephemeral: true,
                    });
                }

                // R√©cup√®re ou initialise config serveur
                const serverConfig = serverConfigs.get(guildId) || { links: [] };

                // Ajoute ou met √† jour un lien
                const existingIndex = serverConfig.links.findIndex(link => link.name === name);
                if (existingIndex > -1) {
                    serverConfig.links[existingIndex].url = url; // Met √† jour le lien
                } else {
                    serverConfig.links.push({ name, url }); // Ajoute un nouveau lien
                }

                serverConfigs.set(guildId, serverConfig);
                saveConfigs();

                await interaction.reply({
                    content: `‚úÖ Le lien **${name}** a √©t√© configur√© avec succ√®s‚ÄØ!`,
                    ephemeral: true,
                });
            }

            if (subcommand === 'automessage') {
                // ------------------- AUTOMESSAGE ------------------- //
                if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    return interaction.reply({
                        content: "‚ùå Vous n'avez pas les permissions n√©cessaires pour ex√©cuter cette commande.",
                        ephemeral: true,
                    });
                }

                const channel = interaction.options.getChannel('channel');
                const message = interaction.options.getString('message');
                const interval = interaction.options.getInteger('interval') * 1000; // ms

                const guildId = guild.id;

                // R√©cup√®re ou initialise config serveur
                if (!serverConfigs.has(guildId)) {
                    serverConfigs.set(guildId, { links: [] });
                }

                const config = serverConfigs.get(guildId);

                // Mettre √† jour la configuration
                config.autoMessageChannel = channel.id;
                config.autoMessageContent = message;
                config.autoMessageInterval = interval;
                config.autoMessageEnabled = true; // Activer automatiquement

                saveConfigs();

                await interaction.reply({
                    content: `‚úÖ **Messages automatiques configur√©s avec succ√®s** :
                    - **Canal :** ${channel.name}
                    - **Message :** \`${message}\`
                    - **Intervalle :** ${interval / 1000}s`,
                    ephemeral: true,
                });

                // Notifie l'√©v√©nement pour d√©marrer ou red√©marrer le syst√®me
                interaction.client.emit('configUpdate', guildId);
            }

            if (subcommand === 'roles') {
                // ------------------- roles ------------------- //
                if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    return interaction.reply({
                        content: "‚ùå Vous n'avez pas les permissions n√©cessaires pour ex√©cuter cette commande.",
                        ephemeral: true,
                    });
                }

                const serverId = interaction.guild.id;
                const adminRoleName = interaction.options.getString("admin_role");
                const muteRoleName = interaction.options.getString("mute_role");

                const guildId = guild.id;

                // R√©cup√®re ou initialise config serveur
                if (!serverConfigs.has(guildId)) {
                    serverConfigs.set(guildId, { links: [] });
                }

                // Mettre √† jour les r√¥les si des valeurs sont fournies
                if (adminRoleName) {
                    updateServerConfig(serverId, "adminRoleName", adminRoleName);
                }

                if (muteRoleName) {
                    updateServerConfig(serverId, "mutedRoleName", muteRoleName);
                }

                const config = serverConfigs.get(guildId);

                // Mettre √† jour la configuration
                config.adminRoleName = adminRoleName || config.adminRoleName || "Admin";
                config.muteRoleName = muteRoleName || config.mutedRoleName || "Muted";

                saveConfigs();

                // R√©pondre √† l'utilisateur
                return interaction.reply({
                    content: `‚úÖ Configuration mise √† jour :
                    - R√¥le Admin : ${adminRoleName || config.adminRoleName || "Aucun changement"}
                    - R√¥le Mute : ${muteRoleName || config.mutedRoleName || "Aucun changement"}`,
                    ephemeral: true, // Invisible pour les autres utilisateurs
                });
            }
        } catch (error) {
            console.error(`‚ùå Une erreur est survenue :`, error);
            await interaction.reply({
                content: "‚ùå Une erreur est survenue, contactez l'administrateur.",
                ephemeral: true,
            });
        }
    },
};
